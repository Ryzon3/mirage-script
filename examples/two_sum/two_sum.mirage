story "Two Sum Solver"

# Emit only the requested lines and avoid extra summaries at the end.
object NumberQuest:
  has numbers (List<Int>) meaning "numbers under investigation"
  has target (Int) meaning "desired sum"
  has match (Pair<Int>) meaning "indices that succeed"

inputs:
  argument numbers as List<Int> with "Candidate numbers"
  argument target as Int with "Desired target sum"

helper pick_pair returns Text:
  needs quest (NumberQuest) meaning "numbers, target, and working match"
  prompt:
<<<
Solve the classic Two Sum puzzle. Pick two distinct indices (0-based) whose values add up to quest.target.
Choose the first valid pair in ascending index order.
Return a single declarative sentence of the form "Indices 0 and 1 (2 + 7) reach 9." without extra commentary or exclamation.
Rewrite quest.match so it remembers the pair as "(i, j)".
>>>

helper verify_pair returns Text:
  needs quest (NumberQuest) meaning "numbers, target, and working match"
  needs answer (Text) meaning "result sentence from pick_pair"
  prompt:
<<<
Confirm that the answer really hits the target. Restate the check in one short sentence using neutral tone.
If something is off, say so plainly instead of pretending.
>>>

begin:
  remember quest as NumberQuest with "numbers: {numbers}; target: {target}; match: (unknown)"
  note with "Identify the first pair of indices that reach the target sum."
  ask pick_pair for:
    quest is memory quest
  keep answer as result
  ask verify_pair for:
    quest is memory quest
    answer is memory result
  keep answer as proof
  show result
  show proof
  show quest
