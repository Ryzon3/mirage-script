story "Longest Unique Substring"

# Provide technical narration only and end after emitting the requested outputs.

object SubstringCase:
  has text (Text) meaning "input string"
  has length (Int) meaning "best length"
  has snippet (Text) meaning "example substring"
  has reasoning (Text) meaning "how it was found"

inputs:
  argument text as Text with "Input string to analyse"

helper find_longest_unique returns Text:
  needs case (SubstringCase) meaning "text under analysis and current best window"
  prompt:
<<<
Use the sliding-window idea to find the longest substring without repeated characters.
Share the length and give one example substring.
Rewrite the case memory so the length and snippet fields contain your discoveries.
Report the findings in a short factual sentence (for example, "Best length: 3, substring: 'abc'").
>>>

helper explain_window returns Text:
  needs case (SubstringCase) meaning "text under analysis and current best window"
  needs recap (Text) meaning "summary sentence from find_longest_unique"
  prompt:
<<<
In a short paragraph, describe how the window slid around, mentioning when duplicates appeared.
Write in an objective, technical tone and avoid dramatic language.
Store this explanation inside case.reasoning and return the same text.
>>>

begin:
  remember mystery as SubstringCase with "text: {text}; length: 0; snippet: (none); reasoning: (none)"
  ask find_longest_unique for:
    case is memory mystery
  keep answer as headline
  ask explain_window for:
    case is memory mystery
    recap is memory headline
  keep answer as detail
  show headline
  show detail
  show mystery
